Grading at Mon Aug 26 04:07:00 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==402== Memcheck, a memory error detector
==402== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==402== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==402== Command: ./test-eval inp.1.txt
==402== Parent PID: 401
==402== 
==402== Use of uninitialised value of size 8
==402==    at 0x40149B: card_ptr_comp (eval.c:10)
==402==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==402==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==402==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==402==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==402==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==402==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==402==    by 0x4E7369E: qsort_r (msort.c:297)
==402==    by 0x402CED: main (test-eval.c:112)
==402== 
==402== Invalid read of size 8
==402==    at 0x40149B: card_ptr_comp (eval.c:10)
==402==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==402==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==402==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==402==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==402==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==402==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==402==    by 0x4E7369E: qsort_r (msort.c:297)
==402==    by 0x402CED: main (test-eval.c:112)
==402==  Address 0xffffffffffffffff is not stack'd, malloc'd or (recently) free'd
==402== 
==402== 
==402== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==402==  Access not within mapped region at address 0xFFFFFFFFFFFFFFFF
==402==    at 0x40149B: card_ptr_comp (eval.c:10)
==402==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==402==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==402==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==402==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==402==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==402==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==402==    by 0x4E7369E: qsort_r (msort.c:297)
==402==    by 0x402CED: main (test-eval.c:112)
==402==  If you believe this happened as a result of a stack
==402==  overflow in your program's main thread (unlikely but
==402==  possible), you can try to increase the size of the
==402==  main thread stack using the --main-stacksize= flag.
==402==  The main thread stack size used in this run was 8388608.
==402== 
==402== HEAP SUMMARY:
==402==     in use at exit: 896 bytes in 18 blocks
==402==   total heap usage: 29 allocs, 11 frees, 5,232 bytes allocated
==402== 
==402== LEAK SUMMARY:
==402==    definitely lost: 0 bytes in 0 blocks
==402==    indirectly lost: 0 bytes in 0 blocks
==402==      possibly lost: 0 bytes in 0 blocks
==402==    still reachable: 896 bytes in 18 blocks
==402==         suppressed: 0 bytes in 0 blocks
==402== Rerun with --leak-check=full to see details of leaked memory
==402== 
==402== For counts of detected and suppressed errors, rerun with: -v
==402== Use --track-origins=yes to see where uninitialised values come from
==402== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==407== Memcheck, a memory error detector
==407== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==407== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==407== Command: ./test-eval inp.2.txt
==407== Parent PID: 406
==407== 
==407== Use of uninitialised value of size 8
==407==    at 0x40149B: card_ptr_comp (eval.c:10)
==407==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==407==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==407==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==407==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==407==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==407==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==407==    by 0x4E7369E: qsort_r (msort.c:297)
==407==    by 0x402CED: main (test-eval.c:112)
==407== 
==407== Invalid read of size 8
==407==    at 0x40149B: card_ptr_comp (eval.c:10)
==407==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==407==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==407==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==407==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==407==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==407==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==407==    by 0x4E7369E: qsort_r (msort.c:297)
==407==    by 0x402CED: main (test-eval.c:112)
==407==  Address 0xffffffffffffffff is not stack'd, malloc'd or (recently) free'd
==407== 
==407== 
==407== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==407==  Access not within mapped region at address 0xFFFFFFFFFFFFFFFF
==407==    at 0x40149B: card_ptr_comp (eval.c:10)
==407==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==407==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==407==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==407==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==407==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==407==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==407==    by 0x4E7369E: qsort_r (msort.c:297)
==407==    by 0x402CED: main (test-eval.c:112)
==407==  If you believe this happened as a result of a stack
==407==  overflow in your program's main thread (unlikely but
==407==  possible), you can try to increase the size of the
==407==  main thread stack using the --main-stacksize= flag.
==407==  The main thread stack size used in this run was 8388608.
==407== 
==407== HEAP SUMMARY:
==407==     in use at exit: 880 bytes in 17 blocks
==407==   total heap usage: 27 allocs, 10 frees, 5,176 bytes allocated
==407== 
==407== LEAK SUMMARY:
==407==    definitely lost: 0 bytes in 0 blocks
==407==    indirectly lost: 0 bytes in 0 blocks
==407==      possibly lost: 0 bytes in 0 blocks
==407==    still reachable: 880 bytes in 17 blocks
==407==         suppressed: 0 bytes in 0 blocks
==407== Rerun with --leak-check=full to see details of leaked memory
==407== 
==407== For counts of detected and suppressed errors, rerun with: -v
==407== Use --track-origins=yes to see where uninitialised values come from
==407== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==412== Memcheck, a memory error detector
==412== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==412== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==412== Command: ./test-eval inp.3.txt
==412== Parent PID: 411
==412== 
==412== Use of uninitialised value of size 8
==412==    at 0x40149B: card_ptr_comp (eval.c:10)
==412==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==412==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==412==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==412==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==412==    by 0x4E7369E: qsort_r (msort.c:297)
==412==    by 0x402CED: main (test-eval.c:112)
==412== 
==412== Invalid read of size 8
==412==    at 0x40149B: card_ptr_comp (eval.c:10)
==412==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==412==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==412==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==412==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==412==    by 0x4E7369E: qsort_r (msort.c:297)
==412==    by 0x402CED: main (test-eval.c:112)
==412==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==412== 
==412== 
==412== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==412==  Access not within mapped region at address 0x0
==412==    at 0x40149B: card_ptr_comp (eval.c:10)
==412==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==412==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==412==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==412==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==412==    by 0x4E7369E: qsort_r (msort.c:297)
==412==    by 0x402CED: main (test-eval.c:112)
==412==  If you believe this happened as a result of a stack
==412==  overflow in your program's main thread (unlikely but
==412==  possible), you can try to increase the size of the
==412==  main thread stack using the --main-stacksize= flag.
==412==  The main thread stack size used in this run was 8388608.
==412== 
==412== HEAP SUMMARY:
==412==     in use at exit: 864 bytes in 16 blocks
==412==   total heap usage: 25 allocs, 9 frees, 5,120 bytes allocated
==412== 
==412== LEAK SUMMARY:
==412==    definitely lost: 0 bytes in 0 blocks
==412==    indirectly lost: 0 bytes in 0 blocks
==412==      possibly lost: 0 bytes in 0 blocks
==412==    still reachable: 864 bytes in 16 blocks
==412==         suppressed: 0 bytes in 0 blocks
==412== Rerun with --leak-check=full to see details of leaked memory
==412== 
==412== For counts of detected and suppressed errors, rerun with: -v
==412== Use --track-origins=yes to see where uninitialised values come from
==412== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==417== Memcheck, a memory error detector
==417== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==417== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==417== Command: ./test-eval inp.4.txt
==417== Parent PID: 416
==417== 
==417== Use of uninitialised value of size 8
==417==    at 0x40149B: card_ptr_comp (eval.c:10)
==417==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==417==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==417==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==417==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==417==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==417==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==417==    by 0x4E7369E: qsort_r (msort.c:297)
==417==    by 0x402CED: main (test-eval.c:112)
==417== 
==417== Invalid read of size 8
==417==    at 0x40149B: card_ptr_comp (eval.c:10)
==417==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==417==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==417==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==417==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==417==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==417==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==417==    by 0x4E7369E: qsort_r (msort.c:297)
==417==    by 0x402CED: main (test-eval.c:112)
==417==  Address 0xffffffffffffffff is not stack'd, malloc'd or (recently) free'd
==417== 
==417== 
==417== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==417==  Access not within mapped region at address 0xFFFFFFFFFFFFFFFF
==417==    at 0x40149B: card_ptr_comp (eval.c:10)
==417==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==417==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==417==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==417==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==417==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==417==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==417==    by 0x4E7369E: qsort_r (msort.c:297)
==417==    by 0x402CED: main (test-eval.c:112)
==417==  If you believe this happened as a result of a stack
==417==  overflow in your program's main thread (unlikely but
==417==  possible), you can try to increase the size of the
==417==  main thread stack using the --main-stacksize= flag.
==417==  The main thread stack size used in this run was 8388608.
==417== 
==417== HEAP SUMMARY:
==417==     in use at exit: 896 bytes in 18 blocks
==417==   total heap usage: 29 allocs, 11 frees, 5,232 bytes allocated
==417== 
==417== LEAK SUMMARY:
==417==    definitely lost: 0 bytes in 0 blocks
==417==    indirectly lost: 0 bytes in 0 blocks
==417==      possibly lost: 0 bytes in 0 blocks
==417==    still reachable: 896 bytes in 18 blocks
==417==         suppressed: 0 bytes in 0 blocks
==417== Rerun with --leak-check=full to see details of leaked memory
==417== 
==417== For counts of detected and suppressed errors, rerun with: -v
==417== Use --track-origins=yes to see where uninitialised values come from
==417== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==422== Memcheck, a memory error detector
==422== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==422== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==422== Command: ./test-eval inp.5.txt
==422== Parent PID: 421
==422== 
==422== Use of uninitialised value of size 8
==422==    at 0x40149B: card_ptr_comp (eval.c:10)
==422==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==422==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==422==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==422==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==422==    by 0x4E7369E: qsort_r (msort.c:297)
==422==    by 0x402CED: main (test-eval.c:112)
==422== 
==422== Invalid read of size 8
==422==    at 0x40149B: card_ptr_comp (eval.c:10)
==422==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==422==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==422==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==422==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==422==    by 0x4E7369E: qsort_r (msort.c:297)
==422==    by 0x402CED: main (test-eval.c:112)
==422==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==422== 
==422== 
==422== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==422==  Access not within mapped region at address 0x0
==422==    at 0x40149B: card_ptr_comp (eval.c:10)
==422==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==422==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==422==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==422==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==422==    by 0x4E7369E: qsort_r (msort.c:297)
==422==    by 0x402CED: main (test-eval.c:112)
==422==  If you believe this happened as a result of a stack
==422==  overflow in your program's main thread (unlikely but
==422==  possible), you can try to increase the size of the
==422==  main thread stack using the --main-stacksize= flag.
==422==  The main thread stack size used in this run was 8388608.
==422== 
==422== HEAP SUMMARY:
==422==     in use at exit: 864 bytes in 16 blocks
==422==   total heap usage: 25 allocs, 9 frees, 5,120 bytes allocated
==422== 
==422== LEAK SUMMARY:
==422==    definitely lost: 0 bytes in 0 blocks
==422==    indirectly lost: 0 bytes in 0 blocks
==422==      possibly lost: 0 bytes in 0 blocks
==422==    still reachable: 864 bytes in 16 blocks
==422==         suppressed: 0 bytes in 0 blocks
==422== Rerun with --leak-check=full to see details of leaked memory
==422== 
==422== For counts of detected and suppressed errors, rerun with: -v
==422== Use --track-origins=yes to see where uninitialised values come from
==422== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==427== Memcheck, a memory error detector
==427== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==427== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==427== Command: ./test-eval inp.6.txt
==427== Parent PID: 426
==427== 
==427== Use of uninitialised value of size 8
==427==    at 0x40149B: card_ptr_comp (eval.c:10)
==427==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==427==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==427==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==427==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==427==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==427==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==427==    by 0x4E7369E: qsort_r (msort.c:297)
==427==    by 0x402CED: main (test-eval.c:112)
==427== 
==427== Invalid read of size 8
==427==    at 0x40149B: card_ptr_comp (eval.c:10)
==427==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==427==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==427==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==427==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==427==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==427==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==427==    by 0x4E7369E: qsort_r (msort.c:297)
==427==    by 0x402CED: main (test-eval.c:112)
==427==  Address 0xffffffffffffffff is not stack'd, malloc'd or (recently) free'd
==427== 
==427== 
==427== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==427==  Access not within mapped region at address 0xFFFFFFFFFFFFFFFF
==427==    at 0x40149B: card_ptr_comp (eval.c:10)
==427==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==427==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==427==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==427==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==427==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==427==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==427==    by 0x4E7369E: qsort_r (msort.c:297)
==427==    by 0x402CED: main (test-eval.c:112)
==427==  If you believe this happened as a result of a stack
==427==  overflow in your program's main thread (unlikely but
==427==  possible), you can try to increase the size of the
==427==  main thread stack using the --main-stacksize= flag.
==427==  The main thread stack size used in this run was 8388608.
==427== 
==427== HEAP SUMMARY:
==427==     in use at exit: 896 bytes in 18 blocks
==427==   total heap usage: 29 allocs, 11 frees, 5,232 bytes allocated
==427== 
==427== LEAK SUMMARY:
==427==    definitely lost: 0 bytes in 0 blocks
==427==    indirectly lost: 0 bytes in 0 blocks
==427==      possibly lost: 0 bytes in 0 blocks
==427==    still reachable: 896 bytes in 18 blocks
==427==         suppressed: 0 bytes in 0 blocks
==427== Rerun with --leak-check=full to see details of leaked memory
==427== 
==427== For counts of detected and suppressed errors, rerun with: -v
==427== Use --track-origins=yes to see where uninitialised values come from
==427== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==432== Memcheck, a memory error detector
==432== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==432== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==432== Command: ./test-eval inp.7.txt
==432== Parent PID: 431
==432== 
==432== Use of uninitialised value of size 8
==432==    at 0x40149B: card_ptr_comp (eval.c:10)
==432==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==432==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==432==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==432==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==432==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==432==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==432==    by 0x4E7369E: qsort_r (msort.c:297)
==432==    by 0x402CED: main (test-eval.c:112)
==432== 
==432== Invalid read of size 8
==432==    at 0x40149B: card_ptr_comp (eval.c:10)
==432==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==432==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==432==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==432==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==432==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==432==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==432==    by 0x4E7369E: qsort_r (msort.c:297)
==432==    by 0x402CED: main (test-eval.c:112)
==432==  Address 0x6e6972676c61762f is not stack'd, malloc'd or (recently) free'd
==432== 
==432== 
==432== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==432==  General Protection Fault
==432==    at 0x40149B: card_ptr_comp (eval.c:10)
==432==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==432==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==432==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==432==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==432==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==432==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==432==    by 0x4E7369E: qsort_r (msort.c:297)
==432==    by 0x402CED: main (test-eval.c:112)
==432== 
==432== HEAP SUMMARY:
==432==     in use at exit: 928 bytes in 20 blocks
==432==   total heap usage: 33 allocs, 13 frees, 5,360 bytes allocated
==432== 
==432== LEAK SUMMARY:
==432==    definitely lost: 0 bytes in 0 blocks
==432==    indirectly lost: 0 bytes in 0 blocks
==432==      possibly lost: 0 bytes in 0 blocks
==432==    still reachable: 928 bytes in 20 blocks
==432==         suppressed: 0 bytes in 0 blocks
==432== Rerun with --leak-check=full to see details of leaked memory
==432== 
==432== For counts of detected and suppressed errors, rerun with: -v
==432== Use --track-origins=yes to see where uninitialised values come from
==432== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==437== Memcheck, a memory error detector
==437== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==437== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==437== Command: ./test-eval inp.8.txt
==437== Parent PID: 436
==437== 
==437== Use of uninitialised value of size 8
==437==    at 0x40149B: card_ptr_comp (eval.c:10)
==437==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==437==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==437==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==437==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==437==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==437==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==437==    by 0x4E7369E: qsort_r (msort.c:297)
==437==    by 0x402CED: main (test-eval.c:112)
==437== 
==437== Invalid read of size 8
==437==    at 0x40149B: card_ptr_comp (eval.c:10)
==437==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==437==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==437==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==437==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==437==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==437==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==437==    by 0x4E7369E: qsort_r (msort.c:297)
==437==    by 0x402CED: main (test-eval.c:112)
==437==  Address 0xffffffffffffffff is not stack'd, malloc'd or (recently) free'd
==437== 
==437== 
==437== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==437==  Access not within mapped region at address 0xFFFFFFFFFFFFFFFF
==437==    at 0x40149B: card_ptr_comp (eval.c:10)
==437==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==437==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==437==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==437==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==437==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==437==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==437==    by 0x4E7369E: qsort_r (msort.c:297)
==437==    by 0x402CED: main (test-eval.c:112)
==437==  If you believe this happened as a result of a stack
==437==  overflow in your program's main thread (unlikely but
==437==  possible), you can try to increase the size of the
==437==  main thread stack using the --main-stacksize= flag.
==437==  The main thread stack size used in this run was 8388608.
==437== 
==437== HEAP SUMMARY:
==437==     in use at exit: 896 bytes in 18 blocks
==437==   total heap usage: 29 allocs, 11 frees, 5,232 bytes allocated
==437== 
==437== LEAK SUMMARY:
==437==    definitely lost: 0 bytes in 0 blocks
==437==    indirectly lost: 0 bytes in 0 blocks
==437==      possibly lost: 0 bytes in 0 blocks
==437==    still reachable: 896 bytes in 18 blocks
==437==         suppressed: 0 bytes in 0 blocks
==437== Rerun with --leak-check=full to see details of leaked memory
==437== 
==437== For counts of detected and suppressed errors, rerun with: -v
==437== Use --track-origins=yes to see where uninitialised values come from
==437== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==442== Memcheck, a memory error detector
==442== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==442== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==442== Command: ./test-eval inp.9.txt
==442== Parent PID: 441
==442== 
==442== Use of uninitialised value of size 8
==442==    at 0x40149B: card_ptr_comp (eval.c:10)
==442==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==442==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==442==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==442==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==442==    by 0x4E7369E: qsort_r (msort.c:297)
==442==    by 0x402CED: main (test-eval.c:112)
==442== 
==442== Invalid read of size 8
==442==    at 0x40149B: card_ptr_comp (eval.c:10)
==442==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==442==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==442==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==442==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==442==    by 0x4E7369E: qsort_r (msort.c:297)
==442==    by 0x402CED: main (test-eval.c:112)
==442==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==442== 
==442== 
==442== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==442==  Access not within mapped region at address 0x0
==442==    at 0x40149B: card_ptr_comp (eval.c:10)
==442==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==442==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==442==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==442==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==442==    by 0x4E7369E: qsort_r (msort.c:297)
==442==    by 0x402CED: main (test-eval.c:112)
==442==  If you believe this happened as a result of a stack
==442==  overflow in your program's main thread (unlikely but
==442==  possible), you can try to increase the size of the
==442==  main thread stack using the --main-stacksize= flag.
==442==  The main thread stack size used in this run was 8388608.
==442== 
==442== HEAP SUMMARY:
==442==     in use at exit: 864 bytes in 16 blocks
==442==   total heap usage: 25 allocs, 9 frees, 5,120 bytes allocated
==442== 
==442== LEAK SUMMARY:
==442==    definitely lost: 0 bytes in 0 blocks
==442==    indirectly lost: 0 bytes in 0 blocks
==442==      possibly lost: 0 bytes in 0 blocks
==442==    still reachable: 864 bytes in 16 blocks
==442==         suppressed: 0 bytes in 0 blocks
==442== Rerun with --leak-check=full to see details of leaked memory
==442== 
==442== For counts of detected and suppressed errors, rerun with: -v
==442== Use --track-origins=yes to see where uninitialised values come from
==442== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==447== Memcheck, a memory error detector
==447== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==447== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==447== Command: ./test-eval inp.10.txt
==447== Parent PID: 446
==447== 
==447== Use of uninitialised value of size 8
==447==    at 0x40149B: card_ptr_comp (eval.c:10)
==447==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==447==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==447==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==447==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==447==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==447==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==447==    by 0x4E7369E: qsort_r (msort.c:297)
==447==    by 0x402CED: main (test-eval.c:112)
==447== 
==447== Invalid read of size 8
==447==    at 0x40149B: card_ptr_comp (eval.c:10)
==447==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==447==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==447==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==447==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==447==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==447==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==447==    by 0x4E7369E: qsort_r (msort.c:297)
==447==    by 0x402CED: main (test-eval.c:112)
==447==  Address 0xffffffffffffffff is not stack'd, malloc'd or (recently) free'd
==447== 
==447== 
==447== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==447==  Access not within mapped region at address 0xFFFFFFFFFFFFFFFF
==447==    at 0x40149B: card_ptr_comp (eval.c:10)
==447==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==447==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==447==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==447==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==447==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==447==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==447==    by 0x4E7369E: qsort_r (msort.c:297)
==447==    by 0x402CED: main (test-eval.c:112)
==447==  If you believe this happened as a result of a stack
==447==  overflow in your program's main thread (unlikely but
==447==  possible), you can try to increase the size of the
==447==  main thread stack using the --main-stacksize= flag.
==447==  The main thread stack size used in this run was 8388608.
==447== 
==447== HEAP SUMMARY:
==447==     in use at exit: 896 bytes in 18 blocks
==447==   total heap usage: 29 allocs, 11 frees, 5,232 bytes allocated
==447== 
==447== LEAK SUMMARY:
==447==    definitely lost: 0 bytes in 0 blocks
==447==    indirectly lost: 0 bytes in 0 blocks
==447==      possibly lost: 0 bytes in 0 blocks
==447==    still reachable: 896 bytes in 18 blocks
==447==         suppressed: 0 bytes in 0 blocks
==447== Rerun with --leak-check=full to see details of leaked memory
==447== 
==447== For counts of detected and suppressed errors, rerun with: -v
==447== Use --track-origins=yes to see where uninitialised values come from
==447== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
