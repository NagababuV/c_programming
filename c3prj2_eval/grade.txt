Grading at Mon Aug 26 10:33:16 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==162== Memcheck, a memory error detector
==162== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==162== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==162== Command: ./test-eval inp.1.txt
==162== Parent PID: 161
==162== 
==162== Use of uninitialised value of size 8
==162==    at 0x40149B: card_ptr_comp (eval.c:10)
==162==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==162==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==162==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==162==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==162==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==162==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==162==    by 0x4E7369E: qsort_r (msort.c:297)
==162==    by 0x402CED: main (test-eval.c:112)
==162== 
==162== Invalid read of size 8
==162==    at 0x40149B: card_ptr_comp (eval.c:10)
==162==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==162==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==162==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==162==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==162==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==162==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==162==    by 0x4E7369E: qsort_r (msort.c:297)
==162==    by 0x402CED: main (test-eval.c:112)
==162==  Address 0xffffffffffffffff is not stack'd, malloc'd or (recently) free'd
==162== 
==162== 
==162== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==162==  Access not within mapped region at address 0xFFFFFFFFFFFFFFFF
==162==    at 0x40149B: card_ptr_comp (eval.c:10)
==162==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==162==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==162==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==162==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==162==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==162==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==162==    by 0x4E7369E: qsort_r (msort.c:297)
==162==    by 0x402CED: main (test-eval.c:112)
==162==  If you believe this happened as a result of a stack
==162==  overflow in your program's main thread (unlikely but
==162==  possible), you can try to increase the size of the
==162==  main thread stack using the --main-stacksize= flag.
==162==  The main thread stack size used in this run was 8388608.
==162== 
==162== HEAP SUMMARY:
==162==     in use at exit: 896 bytes in 18 blocks
==162==   total heap usage: 29 allocs, 11 frees, 5,232 bytes allocated
==162== 
==162== LEAK SUMMARY:
==162==    definitely lost: 0 bytes in 0 blocks
==162==    indirectly lost: 0 bytes in 0 blocks
==162==      possibly lost: 0 bytes in 0 blocks
==162==    still reachable: 896 bytes in 18 blocks
==162==         suppressed: 0 bytes in 0 blocks
==162== Rerun with --leak-check=full to see details of leaked memory
==162== 
==162== For counts of detected and suppressed errors, rerun with: -v
==162== Use --track-origins=yes to see where uninitialised values come from
==162== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==167== Memcheck, a memory error detector
==167== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==167== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==167== Command: ./test-eval inp.2.txt
==167== Parent PID: 166
==167== 
==167== Use of uninitialised value of size 8
==167==    at 0x40149B: card_ptr_comp (eval.c:10)
==167==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==167==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==167==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==167==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==167==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==167==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==167==    by 0x4E7369E: qsort_r (msort.c:297)
==167==    by 0x402CED: main (test-eval.c:112)
==167== 
==167== Invalid read of size 8
==167==    at 0x40149B: card_ptr_comp (eval.c:10)
==167==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==167==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==167==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==167==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==167==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==167==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==167==    by 0x4E7369E: qsort_r (msort.c:297)
==167==    by 0x402CED: main (test-eval.c:112)
==167==  Address 0xffffffffffffffff is not stack'd, malloc'd or (recently) free'd
==167== 
==167== 
==167== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==167==  Access not within mapped region at address 0xFFFFFFFFFFFFFFFF
==167==    at 0x40149B: card_ptr_comp (eval.c:10)
==167==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==167==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==167==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==167==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==167==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==167==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==167==    by 0x4E7369E: qsort_r (msort.c:297)
==167==    by 0x402CED: main (test-eval.c:112)
==167==  If you believe this happened as a result of a stack
==167==  overflow in your program's main thread (unlikely but
==167==  possible), you can try to increase the size of the
==167==  main thread stack using the --main-stacksize= flag.
==167==  The main thread stack size used in this run was 8388608.
==167== 
==167== HEAP SUMMARY:
==167==     in use at exit: 880 bytes in 17 blocks
==167==   total heap usage: 27 allocs, 10 frees, 5,176 bytes allocated
==167== 
==167== LEAK SUMMARY:
==167==    definitely lost: 0 bytes in 0 blocks
==167==    indirectly lost: 0 bytes in 0 blocks
==167==      possibly lost: 0 bytes in 0 blocks
==167==    still reachable: 880 bytes in 17 blocks
==167==         suppressed: 0 bytes in 0 blocks
==167== Rerun with --leak-check=full to see details of leaked memory
==167== 
==167== For counts of detected and suppressed errors, rerun with: -v
==167== Use --track-origins=yes to see where uninitialised values come from
==167== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==172== Memcheck, a memory error detector
==172== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==172== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==172== Command: ./test-eval inp.3.txt
==172== Parent PID: 171
==172== 
==172== Use of uninitialised value of size 8
==172==    at 0x40149B: card_ptr_comp (eval.c:10)
==172==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==172==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==172==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==172==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==172==    by 0x4E7369E: qsort_r (msort.c:297)
==172==    by 0x402CED: main (test-eval.c:112)
==172== 
==172== Invalid read of size 8
==172==    at 0x40149B: card_ptr_comp (eval.c:10)
==172==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==172==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==172==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==172==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==172==    by 0x4E7369E: qsort_r (msort.c:297)
==172==    by 0x402CED: main (test-eval.c:112)
==172==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==172== 
==172== 
==172== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==172==  Access not within mapped region at address 0x0
==172==    at 0x40149B: card_ptr_comp (eval.c:10)
==172==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==172==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==172==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==172==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==172==    by 0x4E7369E: qsort_r (msort.c:297)
==172==    by 0x402CED: main (test-eval.c:112)
==172==  If you believe this happened as a result of a stack
==172==  overflow in your program's main thread (unlikely but
==172==  possible), you can try to increase the size of the
==172==  main thread stack using the --main-stacksize= flag.
==172==  The main thread stack size used in this run was 8388608.
==172== 
==172== HEAP SUMMARY:
==172==     in use at exit: 864 bytes in 16 blocks
==172==   total heap usage: 25 allocs, 9 frees, 5,120 bytes allocated
==172== 
==172== LEAK SUMMARY:
==172==    definitely lost: 0 bytes in 0 blocks
==172==    indirectly lost: 0 bytes in 0 blocks
==172==      possibly lost: 0 bytes in 0 blocks
==172==    still reachable: 864 bytes in 16 blocks
==172==         suppressed: 0 bytes in 0 blocks
==172== Rerun with --leak-check=full to see details of leaked memory
==172== 
==172== For counts of detected and suppressed errors, rerun with: -v
==172== Use --track-origins=yes to see where uninitialised values come from
==172== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==177== Memcheck, a memory error detector
==177== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==177== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==177== Command: ./test-eval inp.4.txt
==177== Parent PID: 176
==177== 
==177== Use of uninitialised value of size 8
==177==    at 0x40149B: card_ptr_comp (eval.c:10)
==177==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==177==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==177==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==177==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==177==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==177==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==177==    by 0x4E7369E: qsort_r (msort.c:297)
==177==    by 0x402CED: main (test-eval.c:112)
==177== 
==177== Invalid read of size 8
==177==    at 0x40149B: card_ptr_comp (eval.c:10)
==177==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==177==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==177==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==177==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==177==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==177==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==177==    by 0x4E7369E: qsort_r (msort.c:297)
==177==    by 0x402CED: main (test-eval.c:112)
==177==  Address 0xffffffffffffffff is not stack'd, malloc'd or (recently) free'd
==177== 
==177== 
==177== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==177==  Access not within mapped region at address 0xFFFFFFFFFFFFFFFF
==177==    at 0x40149B: card_ptr_comp (eval.c:10)
==177==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==177==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==177==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==177==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==177==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==177==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==177==    by 0x4E7369E: qsort_r (msort.c:297)
==177==    by 0x402CED: main (test-eval.c:112)
==177==  If you believe this happened as a result of a stack
==177==  overflow in your program's main thread (unlikely but
==177==  possible), you can try to increase the size of the
==177==  main thread stack using the --main-stacksize= flag.
==177==  The main thread stack size used in this run was 8388608.
==177== 
==177== HEAP SUMMARY:
==177==     in use at exit: 896 bytes in 18 blocks
==177==   total heap usage: 29 allocs, 11 frees, 5,232 bytes allocated
==177== 
==177== LEAK SUMMARY:
==177==    definitely lost: 0 bytes in 0 blocks
==177==    indirectly lost: 0 bytes in 0 blocks
==177==      possibly lost: 0 bytes in 0 blocks
==177==    still reachable: 896 bytes in 18 blocks
==177==         suppressed: 0 bytes in 0 blocks
==177== Rerun with --leak-check=full to see details of leaked memory
==177== 
==177== For counts of detected and suppressed errors, rerun with: -v
==177== Use --track-origins=yes to see where uninitialised values come from
==177== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==182== Memcheck, a memory error detector
==182== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==182== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==182== Command: ./test-eval inp.5.txt
==182== Parent PID: 181
==182== 
==182== Use of uninitialised value of size 8
==182==    at 0x40149B: card_ptr_comp (eval.c:10)
==182==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==182==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==182==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==182==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==182==    by 0x4E7369E: qsort_r (msort.c:297)
==182==    by 0x402CED: main (test-eval.c:112)
==182== 
==182== Invalid read of size 8
==182==    at 0x40149B: card_ptr_comp (eval.c:10)
==182==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==182==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==182==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==182==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==182==    by 0x4E7369E: qsort_r (msort.c:297)
==182==    by 0x402CED: main (test-eval.c:112)
==182==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==182== 
==182== 
==182== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==182==  Access not within mapped region at address 0x0
==182==    at 0x40149B: card_ptr_comp (eval.c:10)
==182==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==182==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==182==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==182==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==182==    by 0x4E7369E: qsort_r (msort.c:297)
==182==    by 0x402CED: main (test-eval.c:112)
==182==  If you believe this happened as a result of a stack
==182==  overflow in your program's main thread (unlikely but
==182==  possible), you can try to increase the size of the
==182==  main thread stack using the --main-stacksize= flag.
==182==  The main thread stack size used in this run was 8388608.
==182== 
==182== HEAP SUMMARY:
==182==     in use at exit: 864 bytes in 16 blocks
==182==   total heap usage: 25 allocs, 9 frees, 5,120 bytes allocated
==182== 
==182== LEAK SUMMARY:
==182==    definitely lost: 0 bytes in 0 blocks
==182==    indirectly lost: 0 bytes in 0 blocks
==182==      possibly lost: 0 bytes in 0 blocks
==182==    still reachable: 864 bytes in 16 blocks
==182==         suppressed: 0 bytes in 0 blocks
==182== Rerun with --leak-check=full to see details of leaked memory
==182== 
==182== For counts of detected and suppressed errors, rerun with: -v
==182== Use --track-origins=yes to see where uninitialised values come from
==182== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==187== Memcheck, a memory error detector
==187== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==187== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==187== Command: ./test-eval inp.6.txt
==187== Parent PID: 186
==187== 
==187== Use of uninitialised value of size 8
==187==    at 0x40149B: card_ptr_comp (eval.c:10)
==187==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==187==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==187==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==187==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==187==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==187==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==187==    by 0x4E7369E: qsort_r (msort.c:297)
==187==    by 0x402CED: main (test-eval.c:112)
==187== 
==187== Invalid read of size 8
==187==    at 0x40149B: card_ptr_comp (eval.c:10)
==187==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==187==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==187==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==187==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==187==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==187==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==187==    by 0x4E7369E: qsort_r (msort.c:297)
==187==    by 0x402CED: main (test-eval.c:112)
==187==  Address 0xffffffffffffffff is not stack'd, malloc'd or (recently) free'd
==187== 
==187== 
==187== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==187==  Access not within mapped region at address 0xFFFFFFFFFFFFFFFF
==187==    at 0x40149B: card_ptr_comp (eval.c:10)
==187==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==187==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==187==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==187==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==187==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==187==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==187==    by 0x4E7369E: qsort_r (msort.c:297)
==187==    by 0x402CED: main (test-eval.c:112)
==187==  If you believe this happened as a result of a stack
==187==  overflow in your program's main thread (unlikely but
==187==  possible), you can try to increase the size of the
==187==  main thread stack using the --main-stacksize= flag.
==187==  The main thread stack size used in this run was 8388608.
==187== 
==187== HEAP SUMMARY:
==187==     in use at exit: 896 bytes in 18 blocks
==187==   total heap usage: 29 allocs, 11 frees, 5,232 bytes allocated
==187== 
==187== LEAK SUMMARY:
==187==    definitely lost: 0 bytes in 0 blocks
==187==    indirectly lost: 0 bytes in 0 blocks
==187==      possibly lost: 0 bytes in 0 blocks
==187==    still reachable: 896 bytes in 18 blocks
==187==         suppressed: 0 bytes in 0 blocks
==187== Rerun with --leak-check=full to see details of leaked memory
==187== 
==187== For counts of detected and suppressed errors, rerun with: -v
==187== Use --track-origins=yes to see where uninitialised values come from
==187== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==192== Memcheck, a memory error detector
==192== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==192== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==192== Command: ./test-eval inp.7.txt
==192== Parent PID: 191
==192== 
==192== Use of uninitialised value of size 8
==192==    at 0x40149B: card_ptr_comp (eval.c:10)
==192==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==192==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==192==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==192==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==192==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==192==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==192==    by 0x4E7369E: qsort_r (msort.c:297)
==192==    by 0x402CED: main (test-eval.c:112)
==192== 
==192== Invalid read of size 8
==192==    at 0x40149B: card_ptr_comp (eval.c:10)
==192==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==192==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==192==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==192==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==192==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==192==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==192==    by 0x4E7369E: qsort_r (msort.c:297)
==192==    by 0x402CED: main (test-eval.c:112)
==192==  Address 0x6e6972676c61762f is not stack'd, malloc'd or (recently) free'd
==192== 
==192== 
==192== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==192==  General Protection Fault
==192==    at 0x40149B: card_ptr_comp (eval.c:10)
==192==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==192==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==192==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==192==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==192==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==192==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==192==    by 0x4E7369E: qsort_r (msort.c:297)
==192==    by 0x402CED: main (test-eval.c:112)
==192== 
==192== HEAP SUMMARY:
==192==     in use at exit: 928 bytes in 20 blocks
==192==   total heap usage: 33 allocs, 13 frees, 5,360 bytes allocated
==192== 
==192== LEAK SUMMARY:
==192==    definitely lost: 0 bytes in 0 blocks
==192==    indirectly lost: 0 bytes in 0 blocks
==192==      possibly lost: 0 bytes in 0 blocks
==192==    still reachable: 928 bytes in 20 blocks
==192==         suppressed: 0 bytes in 0 blocks
==192== Rerun with --leak-check=full to see details of leaked memory
==192== 
==192== For counts of detected and suppressed errors, rerun with: -v
==192== Use --track-origins=yes to see where uninitialised values come from
==192== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==197== Memcheck, a memory error detector
==197== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==197== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==197== Command: ./test-eval inp.8.txt
==197== Parent PID: 196
==197== 
==197== Use of uninitialised value of size 8
==197==    at 0x40149B: card_ptr_comp (eval.c:10)
==197==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==197==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==197==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==197==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==197==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==197==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==197==    by 0x4E7369E: qsort_r (msort.c:297)
==197==    by 0x402CED: main (test-eval.c:112)
==197== 
==197== Invalid read of size 8
==197==    at 0x40149B: card_ptr_comp (eval.c:10)
==197==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==197==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==197==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==197==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==197==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==197==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==197==    by 0x4E7369E: qsort_r (msort.c:297)
==197==    by 0x402CED: main (test-eval.c:112)
==197==  Address 0xffffffffffffffff is not stack'd, malloc'd or (recently) free'd
==197== 
==197== 
==197== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==197==  Access not within mapped region at address 0xFFFFFFFFFFFFFFFF
==197==    at 0x40149B: card_ptr_comp (eval.c:10)
==197==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==197==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==197==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==197==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==197==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==197==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==197==    by 0x4E7369E: qsort_r (msort.c:297)
==197==    by 0x402CED: main (test-eval.c:112)
==197==  If you believe this happened as a result of a stack
==197==  overflow in your program's main thread (unlikely but
==197==  possible), you can try to increase the size of the
==197==  main thread stack using the --main-stacksize= flag.
==197==  The main thread stack size used in this run was 8388608.
==197== 
==197== HEAP SUMMARY:
==197==     in use at exit: 896 bytes in 18 blocks
==197==   total heap usage: 29 allocs, 11 frees, 5,232 bytes allocated
==197== 
==197== LEAK SUMMARY:
==197==    definitely lost: 0 bytes in 0 blocks
==197==    indirectly lost: 0 bytes in 0 blocks
==197==      possibly lost: 0 bytes in 0 blocks
==197==    still reachable: 896 bytes in 18 blocks
==197==         suppressed: 0 bytes in 0 blocks
==197== Rerun with --leak-check=full to see details of leaked memory
==197== 
==197== For counts of detected and suppressed errors, rerun with: -v
==197== Use --track-origins=yes to see where uninitialised values come from
==197== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==202== Memcheck, a memory error detector
==202== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==202== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==202== Command: ./test-eval inp.9.txt
==202== Parent PID: 201
==202== 
==202== Use of uninitialised value of size 8
==202==    at 0x40149B: card_ptr_comp (eval.c:10)
==202==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==202==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==202==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==202==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==202==    by 0x4E7369E: qsort_r (msort.c:297)
==202==    by 0x402CED: main (test-eval.c:112)
==202== 
==202== Invalid read of size 8
==202==    at 0x40149B: card_ptr_comp (eval.c:10)
==202==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==202==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==202==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==202==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==202==    by 0x4E7369E: qsort_r (msort.c:297)
==202==    by 0x402CED: main (test-eval.c:112)
==202==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==202== 
==202== 
==202== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==202==  Access not within mapped region at address 0x0
==202==    at 0x40149B: card_ptr_comp (eval.c:10)
==202==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==202==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==202==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==202==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==202==    by 0x4E7369E: qsort_r (msort.c:297)
==202==    by 0x402CED: main (test-eval.c:112)
==202==  If you believe this happened as a result of a stack
==202==  overflow in your program's main thread (unlikely but
==202==  possible), you can try to increase the size of the
==202==  main thread stack using the --main-stacksize= flag.
==202==  The main thread stack size used in this run was 8388608.
==202== 
==202== HEAP SUMMARY:
==202==     in use at exit: 864 bytes in 16 blocks
==202==   total heap usage: 25 allocs, 9 frees, 5,120 bytes allocated
==202== 
==202== LEAK SUMMARY:
==202==    definitely lost: 0 bytes in 0 blocks
==202==    indirectly lost: 0 bytes in 0 blocks
==202==      possibly lost: 0 bytes in 0 blocks
==202==    still reachable: 864 bytes in 16 blocks
==202==         suppressed: 0 bytes in 0 blocks
==202== Rerun with --leak-check=full to see details of leaked memory
==202== 
==202== For counts of detected and suppressed errors, rerun with: -v
==202== Use --track-origins=yes to see where uninitialised values come from
==202== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==207== Memcheck, a memory error detector
==207== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==207== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==207== Command: ./test-eval inp.10.txt
==207== Parent PID: 206
==207== 
==207== Use of uninitialised value of size 8
==207==    at 0x40149B: card_ptr_comp (eval.c:10)
==207==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==207==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==207==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==207==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==207==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==207==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==207==    by 0x4E7369E: qsort_r (msort.c:297)
==207==    by 0x402CED: main (test-eval.c:112)
==207== 
==207== Invalid read of size 8
==207==    at 0x40149B: card_ptr_comp (eval.c:10)
==207==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==207==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==207==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==207==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==207==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==207==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==207==    by 0x4E7369E: qsort_r (msort.c:297)
==207==    by 0x402CED: main (test-eval.c:112)
==207==  Address 0xffffffffffffffff is not stack'd, malloc'd or (recently) free'd
==207== 
==207== 
==207== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==207==  Access not within mapped region at address 0xFFFFFFFFFFFFFFFF
==207==    at 0x40149B: card_ptr_comp (eval.c:10)
==207==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==207==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==207==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==207==    by 0x4E72EC6: msort_with_tmp (msort.c:45)
==207==    by 0x4E72EC6: msort_with_tmp.part.0 (msort.c:53)
==207==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==207==    by 0x4E7369E: qsort_r (msort.c:297)
==207==    by 0x402CED: main (test-eval.c:112)
==207==  If you believe this happened as a result of a stack
==207==  overflow in your program's main thread (unlikely but
==207==  possible), you can try to increase the size of the
==207==  main thread stack using the --main-stacksize= flag.
==207==  The main thread stack size used in this run was 8388608.
==207== 
==207== HEAP SUMMARY:
==207==     in use at exit: 896 bytes in 18 blocks
==207==   total heap usage: 29 allocs, 11 frees, 5,232 bytes allocated
==207== 
==207== LEAK SUMMARY:
==207==    definitely lost: 0 bytes in 0 blocks
==207==    indirectly lost: 0 bytes in 0 blocks
==207==      possibly lost: 0 bytes in 0 blocks
==207==    still reachable: 896 bytes in 18 blocks
==207==         suppressed: 0 bytes in 0 blocks
==207== Rerun with --leak-check=full to see details of leaked memory
==207== 
==207== For counts of detected and suppressed errors, rerun with: -v
==207== Use --track-origins=yes to see where uninitialised values come from
==207== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
